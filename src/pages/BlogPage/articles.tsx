import React, { useState, useMemo } from "react";
import { ArticleCard } from "../../widgets/articles/articleCard";
import { ArticleModal } from "../../widgets/articles/articleModal";
import { motion } from 'framer-motion';
import { fadeInUp, containerVariants } from '../../shared/fadeIn/fadeInFunction';

interface Article {
  id: number;
  title: string;
  excerpt: string;
  content: string;
}

export const ArticlesSection: React.FC<{ previewCount?: number }> = ({ previewCount }) => {
  const allArticles: Article[] = [
    {
      id: 1,
      title: "Метод явной вторичной деятельности",
      excerpt: "Суррогатная деятельность и интересный способ предотвратить выгорание.",
      content: `Суррогатная деятельность - это деятельность, не имеющая явного видимого результата. Реальность современного информационного мира такова, что любая интеллектуальная деятельность являет собой лишь узкий разрез, чего-то, действительно имеющего значение.
Если фермер выращивает овощи, понимая при этом, что овощи в дальнейшем он будет есть, то, например, SRE разработчику обнаружить взаимосвязь своей работы и закрытия своих биологических потребностей крайне затруднительно. 

Суррогатная деятельность ведёт к нежеланию заниматься не то что своим делом, но и вообще чем-либо, поскольку человек абсолютно утрачивает способность видеть влияние своих действий. Бороться с этим помогают, без всяких сомнений, общение с тремя ценностями 21 века - животные, природа, дети. Эти три сущности возвращают человеку радость жизни. Однако, часто, это не прагматично - заводить собаку, ребёнка, или уходить в поход.

Тогда помогает метод явной вторичной деятельности. Суть метода в занятии вторичной деятельностью, с явным и моментальным результатом. Лучшим решением будет спорт, поскольку он не отнимает целевых интеллектуальных ресурсов, а напротив, заземляет человека, разгружает утомлённой мыслительный аппарат. 

Однако, для людей далёких от спорта, это занятие является очередной суррогатной деятельностью: вот, мол, отжимаюсь, бегаю, а стройнее не стал. В таком случае можно начать с малого - возыметь любое другое занятие, с быстрым видимым результатом. 
Например строить дом в майнкрафте. Одинаковые дни саморазвития идут один за другим, рассудок начинает теряться, но заходя на свой сервер в майнкрафт на месте пустоши спустя неделю одинаковых дней уже стоит красивый дом. 

Нашему сознанию бесконечно важно ощущать и получать регулярные подтверждения о полезности и результативности наших действий, в особенности, для людей с СДВГ. Эти люди крайне чувствительны к суррогатной деятельности – они её просто не терпят.
Одним из простых и действенных решений станет метод явной вторичной деятельности.`
    },
    {
      id: 2,
      title: "Делегирование принятия решений.",
      excerpt: "Избыток информации превращается в информационный шум, или каких людей лучше не брать в команду",
      content: `Как прагматичный человек, я всегда стремлюсь к оптимизации своей деятельности. Однако рабочие процессы часто завязаны на работу группы людей, что приводит к проблемам коммуникации.

Одна из таких проблем – делегирование принятия решений.  Суть проблемы такова: одному человеку трудно принимать решения в ходе размышлений и он делегирует их другому человеку, забрасывая его ненужной информацией.

Например, я задаю вопрос одногруппнику:
– Ты идёшь на лекцию?

В ответ получаю что-то вроде:
– Ну, слушай, я есть хочу, а до пары осталось всего 20 минут... Не уверен, что успею. Хотя, конечно, преподаватель говорил, что посещаемость влияет на оценку, да и лекции у него интересные...

Казалось бы – обыкновенный разговор.  Однако второй человек вместо ответа на вопрос начал грузить информационным шумом первого.  По-настоящему, выслушивать такие речи стоит больших умственных затрат, которыми работающий человек разбрасываться не может.

Причина этой болтовни в неспособности, чаще – в нежелании второго принимать решения в ходе размышлений, а потому он заваливает информацией первого: вот мол анализ, дерево возможных вариантов принятия решений в ходе мыслительного процесса и информационная база, а что с этим всем делать – тебе решать.

Это как если бы в ответ на GET-запрос сервер возвращал дамп всей базы данных. 

По-настоящему, проблема значительно обширнее.

Смоделирую другую ситуацию: отец просит сына сходить в магазин за колбасой. Сын уходит в магазин и через время звонит отцу:
– В этом магазине колбасы нет.

Отец отвечает мол сходи в другой, колбаса нужна.

Проходит ещё немного времени, и сын снова звонит:  
– Здесь тоже нет. Есть только сервелат, сырокопчёная... Ещё куриное мясо есть...

Что произошло? Произошло делегирование принятия решения от сына к отцу.
отцу нужен был результат – колбаса. сын же настолько загружает отца бесконечными вопросами, что отцу буквально легче сходить за колбасой самостоятельно.
Подобно сыну в этом примере, люди бездельные и не решительные делегируют принятие любого решения по ходу приближения к результату другим, что становятся попросту препятствием в достижении результата.

И дело не в конкретных глупых людях – время от времени большинство людей ведут себя как сын в этой истории по той причине, что они не понимают чего от них хотят.
Отцу не нужно было, чтобы сын просто осуществил поход в магазин, отцу была нужна колбаса. 
Умение понимать чего от вас ожидают – чертовски важное умение, которое нужно в себе развивать. 
`
    },
  ];

  const [showModal, setShowModal] = useState(false);
  const [selectedArticle, setSelectedArticle] = useState<Article | null>(null);
  const [searchTerm, setSearchTerm] = useState('');

  const filteredArticles = useMemo(() => {
    if (previewCount) {
      return allArticles.slice(0, previewCount);
    }
    return allArticles.filter(article =>
      article.title.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm, allArticles, previewCount]);

  const openModal = (article: Article) => {
    setSelectedArticle(article);
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setSelectedArticle(null);
  };

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      className="flex flex-col items-center"
    >
      {!previewCount && (
        <motion.input
          type="text"
          placeholder="Поиск заметок по названию..."
          className="w-full max-w-xl p-3 mb-8 rounded-lg bg-gray-800 text-white border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-gray-500"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          variants={fadeInUp}
        />
      )}

      {filteredArticles.length > 0 ? (
        <motion.div
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 w-full"
          variants={containerVariants}
          initial="hidden"
          animate="visible"
        >
          {filteredArticles.map(article => (
            <motion.div key={article.id} variants={fadeInUp}>
              <ArticleCard
                title={article.title}
                excerpt={article.excerpt}
                onClick={() => openModal(article)}
              />
            </motion.div>
          ))}
        </motion.div>
      ) : (
        <motion.p className="text-gray-400 text-center text-lg mt-8" variants={fadeInUp}>
          Заметки не найдены.
        </motion.p>
      )}

      {showModal && selectedArticle && (
        <ArticleModal
          title={selectedArticle.title}
          content={selectedArticle.content}
          onClose={closeModal}
        />
      )}
    </motion.div>
  );
};